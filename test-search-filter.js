// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º
// –ó–∞–ø—É—Å–∫: node test-search-filter.js

const BASE_URL = 'http://localhost:4322/api/search';

async function testSearch(query, domain = null) {
  const url = new URL(BASE_URL);
  url.searchParams.set('q', query);
  if (domain) {
    url.searchParams.set('domain', domain);
  }
  
  try {
    const response = await fetch(url);
    const data = await response.json();
    
    console.log(`\nüîç –ü–æ–∏—Å–∫: "${query}"${domain ? ` | –î–æ–º–µ–Ω: ${domain}` : ' | –í—Å–µ –¥–æ–º–µ–Ω—ã'}`);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ: ${data.total} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
    console.log(`üè∑Ô∏è  –î–æ–º–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: ${data.domain}`);
    
    if (data.results && data.results.length > 0) {
      console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
      data.results.forEach((result, index) => {
        console.log(`  ${index + 1}. ${result.title} (${result.url})`);
      });
    }
    
    if (data.answer) {
      console.log(`üí¨ AI –æ—Ç–≤–µ—Ç: ${data.answer.substring(0, 100)}...`);
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function runTests() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º\n');
  
  // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –¥–æ–º–µ–Ω–∞–º
  await testSearch('—Ç–µ—Å—Ç');
  
  // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ domain-a.example
  await testSearch('—Ç–µ—Å—Ç', 'domain-a.example');
  
  // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ domain-b.example  
  await testSearch('—Ç–µ—Å—Ç', 'domain-b.example');
  
  // –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ shared
  await testSearch('—Ç–µ—Å—Ç', 'shared');
  
  // –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
  await testSearch('–∑–∞–º–µ—Ç–∫–∞', 'domain-a.example');
  
  console.log('\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
}

runTests();
