---
import { fetchNote, getCurrentDomain, fetchPage, generateDefaultHeader } from '../lib/md.ts';
import '../styles/global.css';

const host = Astro.request.headers.get('host') || '';
const url = new URL(Astro.request.url);
const domainOverride = url.searchParams.get('domain');
const currentDomain = domainOverride || getCurrentDomain(host);
const env = Astro.locals?.cloudflare?.env ?? Astro.locals?.runtime?.env;

const [headerHtml, html, footerPartial] = await Promise.all([
  fetchPage('header', true, currentDomain, env, Astro.request),
  (async () => {
    const note = await fetchNote('index', currentDomain, env, Astro.request);
    return note?.html ?? null;
  })(),
  fetchPage('footer', true, currentDomain, env, Astro.request)
]);

if (!html) {
  throw new Error('Failed to fetch index content');
}

// Use default header if not found
const finalHeaderHtml = headerHtml || generateDefaultHeader(host);

const getPrimaryDomain = (domain: string) => {
  const parts = domain.split('.');
  if (parts.length >= 2) {
    return parts.slice(-2).join('.');
  }
  return domain;
};

const fallbackFooter = (() => {
  if (!currentDomain) return null;
  const primaryDomain = getPrimaryDomain(currentDomain);
  const email = `info@${primaryDomain}`;
  return `<p><a href="mailto:${email}">${email}</a></p>`;
})();

const footerHtml = footerPartial || fallbackFooter;

const canonicalUrl = host.includes('localhost') || host.includes('127.0.0.1')
  ? `http://${host}`
  : `https://${host}`;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Zettelkasten Blog</title>
    <meta name="description" content="Public notes and knowledge graph" />
    <meta name="robots" content="index,follow" />
    <link rel="canonical" href={canonicalUrl.endsWith('/') ? canonicalUrl : `${canonicalUrl}/`} />
    <link rel="sitemap" type="application/xml" href="/sitemap.xml" />

    <!-- OG tags -->
    <meta property="og:title" content="Zettelkasten Blog" />
    <meta property="og:description" content="Public notes and knowledge graph" />
    <meta property="og:type" content="website" />
  </head>
  
  <body>
    <div class="max-w-4xl mx-auto p-8">
      <!-- Header -->
      <header class="mb-8 pb-4 border-b-2 border-black">
        <Fragment set:html={finalHeaderHtml} />
      </header>
      
      <!-- Main Content -->
      <main>
        <article class="prose prose-xl max-w-none">
          <Fragment set:html={html} />
        </article>
      </main>
      
      <!-- Footer -->
      {footerHtml && (
        <footer class="mt-12 pt-6 border-t-2 border-black text-sm">
          <Fragment set:html={footerHtml} />
        </footer>
      )}
    </div>
  </body>
</html>