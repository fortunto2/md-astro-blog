---
import { fetchNote, isPrivate, matchesDomain, generateMetaTags, getCurrentDomain, fetchPage, generateDefaultHeader } from '../../lib/md.ts';
import '../../styles/global.css';

const slugParam = Astro.params.slug;
if (!slugParam) {
  return new Response('Slug is required', { status: 400 });
}

const slug = Array.isArray(slugParam) ? slugParam.join('/') : slugParam;

const host = Astro.request.headers.get('host') || '';
const url = new URL(Astro.request.url);
const domainOverride = url.searchParams.get('domain');
const currentDomain = domainOverride || getCurrentDomain(host);
const env = Astro.locals?.cloudflare?.env ?? Astro.locals?.runtime?.env;

const [note, headerHtml, footerPartial] = await Promise.all([
  fetchNote(slug, currentDomain, env, Astro.request),
  fetchPage('header', true, currentDomain, env, Astro.request),
  fetchPage('footer', true, currentDomain, env, Astro.request)
]);
if (!note) {
  return new Response('Note not found', { status: 404 });
}

// Use default header if not found
const finalHeaderHtml = headerHtml || generateDefaultHeader(host);

// Check domain matching
if (!matchesDomain(note.frontmatter, host)) {
  return new Response('Not found', { status: 404 });
}

// Check if private and redirect to access control if needed
const isNotePrivate = isPrivate(note.frontmatter);

const meta = generateMetaTags(note.frontmatter, slug);

// Set cache headers
Astro.response.headers.set('Cache-Control', 'public, max-age=0, s-maxage=86400, stale-while-revalidate=604800');

const getPrimaryDomain = (domain: string) => {
  const parts = domain.split('.');
  if (parts.length >= 2) {
    return parts.slice(-2).join('.');
  }
  return domain;
};

const fallbackFooter = (() => {
  if (!currentDomain) return null;
  const primaryDomain = getPrimaryDomain(currentDomain);
  const email = `info@${primaryDomain}`;
  return `<p><a href='mailto:${email}'>${email}</a></p>`;
})();

const footerHtml = footerPartial || fallbackFooter;

const canonicalHost = host.includes('localhost') || host.includes('127.0.0.1')
  ? `http://${host}`
  : `https://${host}`;

const canonicalUrl = meta.canonical?.startsWith('http')
  ? meta.canonical
  : `${canonicalHost}${meta.canonical?.startsWith('/') ? meta.canonical : `/n/${slug}`}`;

const metaWithCanonical = {
  ...meta,
  canonical: canonicalUrl,
  og: {
    ...meta.og,
    url: canonicalUrl
  }
};
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{metaWithCanonical.title}</title>
    <meta name="description" content={metaWithCanonical.description} />
    <meta name="robots" content={metaWithCanonical.robots} />
    <link rel="canonical" href={metaWithCanonical.canonical} />

    <!-- OG tags -->
    <meta property="og:title" content={metaWithCanonical.og.title} />
    <meta property="og:description" content={metaWithCanonical.og.description} />
    <meta property="og:type" content={metaWithCanonical.og.type} />
    <meta property="og:url" content={metaWithCanonical.og.url} />
    {metaWithCanonical.og.image && <meta property="og:image" content={metaWithCanonical.og.image} />}
    {metaWithCanonical.og.publishedTime && <meta property="article:published_time" content={metaWithCanonical.og.publishedTime} />}

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={metaWithCanonical.og.title} />
    <meta name="twitter:description" content={metaWithCanonical.og.description} />
    {metaWithCanonical.og.image && <meta name="twitter:image" content={metaWithCanonical.og.image} />}
  </head>
  
  <body>
    <div class="max-w-4xl mx-auto p-8">
      <!-- Header -->
      <header class="mb-6 pb-4 border-b-2 border-black">
        <Fragment set:html={finalHeaderHtml} />
      </header>

      <!-- Private Notice -->
      {isNotePrivate && (
        <div class="mb-6 p-4 border-2 border-red-600 bg-yellow-100">
          <p class="text-red-800 font-bold text-center">
            üîí PRIVATE NOTE - This content is not indexed by search engines
          </p>
        </div>
      )}

      <!-- Navigation -->
      <nav class="mb-6 text-sm">
        <a href="/">‚Üê Back to index</a>
        <span class="mx-2">‚Ä¢</span>
        <a href="/search">üîç Search</a>
        <span class="mx-2">‚Ä¢</span>
        <a href={`/n/${slug}.md`}>View source (.md)</a>
      </nav>

      <!-- Main Content -->
      <main>
        <article class="prose prose-xl max-w-none">
          {note.frontmatter.title && !note.hasH1 && (
            <h1>{note.frontmatter.title}</h1>
          )}
          <Fragment set:html={note.html} />
        </article>

        <!-- Note Metadata -->
        <div class="mt-12 pt-6 border-t-2 border-black">
          <h3>Metadata</h3>
          <table>
            {note.frontmatter.date && (
              <tr>
                <td><strong>Date:</strong></td>
                <td>{note.frontmatter.date}</td>
              </tr>
            )}

            {note.frontmatter.category && (
              <tr>
                <td><strong>Category:</strong></td>
                <td>{note.frontmatter.category}</td>
              </tr>
            )}

            {note.frontmatter.tags && note.frontmatter.tags.length > 0 && (
              <tr>
                <td><strong>Tags:</strong></td>
                <td>
                  {note.frontmatter.tags.map((tag, index) => (
                    <span>
                      {tag}
                      {index < note.frontmatter.tags.length - 1 && ', '}
                    </span>
                  ))}
                </td>
              </tr>
            )}

            {note.frontmatter.aliases && note.frontmatter.aliases.length > 0 && (
              <tr>
                <td><strong>Aliases:</strong></td>
                <td>{note.frontmatter.aliases.join(', ')}</td>
              </tr>
            )}
          </table>
        </div>
      </main>

      <!-- Footer -->
      {footerHtml && (
        <footer class="mt-12 pt-6 border-t-2 border-black text-sm">
          <Fragment set:html={footerHtml} />
        </footer>
      )}
    </div>

    <script>
      import { PageHighlight } from '../../scripts/pageHighlight.js';
      new PageHighlight();
    </script>
  </body>
</html>