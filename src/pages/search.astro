---
import { fetchPage, getCurrentDomain, generateDefaultHeader } from '../lib/md.ts';

const host = Astro.request.headers.get('host') || '';
const url = new URL(Astro.request.url);
const domainOverride = url.searchParams.get('domain');
const currentDomain = domainOverride || getCurrentDomain(host);
const env = Astro.locals?.cloudflare?.env ?? Astro.locals?.runtime?.env;

const query = url.searchParams.get('q') || '';

const [headerHtml, footerPartial] = await Promise.all([
  fetchPage('header', true, currentDomain, env, Astro.request),
  fetchPage('footer', true, currentDomain, env, Astro.request)
]);

// Use default header if not found
const finalHeaderHtml = headerHtml || generateDefaultHeader(host);

const getPrimaryDomain = (domain: string) => {
  const parts = domain.split('.');
  if (parts.length >= 2) {
    return parts.slice(-2).join('.');
  }
  return domain;
};

const fallbackFooter = (() => {
  if (!currentDomain) return null;
  const primaryDomain = getPrimaryDomain(currentDomain);
  const email = `info@${primaryDomain}`;
  return `<p><a href="mailto:${email}">${email}</a></p>`;
})();

const footerHtml = footerPartial || fallbackFooter;

const canonicalUrl = host.includes('localhost') || host.includes('127.0.0.1')
  ? `http://${host}/search`
  : `https://${host}/search`;

// Set cache headers
Astro.response.headers.set('Cache-Control', 'public, max-age=0, s-maxage=3600, stale-while-revalidate=86400');
---

<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ü–æ–∏—Å–∫ | Blog</title>
    <meta name="description" content="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º –±–ª–æ–≥–∞" />
    <meta name="robots" content="index,follow" />
    <link rel="canonical" href={canonicalUrl} />

    <!-- OG tags -->
    <meta property="og:title" content="–ü–æ–∏—Å–∫ | Blog" />
    <meta property="og:description" content="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º –±–ª–æ–≥–∞" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalUrl} />

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="–ü–æ–∏—Å–∫ | Blog" />
    <meta name="twitter:description" content="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º –±–ª–æ–≥–∞" />

    <style>
      body {
        max-width: 860px;
        margin: 0 auto;
        padding: 2rem;
        font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif;
        line-height: 1.55;
      }

      .prose {
        color: #333;
      }

      .prose h1 {
        color: #111;
        border-bottom: 1px solid #eee;
        padding-bottom: 0.5rem;
        margin-bottom: 1rem;
      }

      .prose a {
        color: #0066cc;
        text-decoration: none;
      }

      .prose a:hover {
        text-decoration: underline;
      }

      .search-container {
        margin: 2rem 0;
      }

      .search-form {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 2rem;
      }

      .search-input {
        flex: 1;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
      }

      .search-button {
        padding: 0.75rem 1.5rem;
        background: #0066cc;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
      }

      .search-button:hover {
        background: #0056b3;
      }

      .search-button:disabled {
        background: #ccc;
        cursor: not-allowed;
      }

      .search-results {
        margin-top: 2rem;
      }

      .search-result {
        border: 1px solid #eee;
        border-radius: 4px;
        padding: 1rem;
        margin-bottom: 1rem;
      }

      .search-result h3 {
        margin: 0 0 0.5rem 0;
        color: #0066cc;
      }

      .search-result p {
        margin: 0.5rem 0;
        color: #666;
      }

      .search-meta {
        font-size: 0.9em;
        color: #999;
        margin-top: 0.5rem;
      }

      .search-score {
        background: #f0f0f0;
        padding: 0.2rem 0.4rem;
        border-radius: 12px;
        font-size: 0.8em;
      }

      .loading {
        text-align: center;
        color: #666;
        padding: 2rem;
      }

      .error {
        background: #fee;
        border: 1px solid #fcc;
        padding: 1rem;
        border-radius: 4px;
        color: #c44;
        margin: 1rem 0;
      }

      .search-mode {
        display: flex;
        gap: 1rem;
        margin: 1rem 0;
        padding: 0.5rem;
        background: #f8f8f8;
        border-radius: 4px;
      }

      .mode-label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        font-size: 0.9em;
        padding: 0.5rem 0.75rem;
        border-radius: 4px;
        transition: background-color 0.2s;
      }

      .mode-label:hover {
        background: #e8e8e8;
      }

      .mode-label input[type="radio"] {
        margin: 0;
      }

      nav {
        margin-bottom: 2rem;
      }

      nav a {
        color: #666;
        text-decoration: none;
        font-size: 0.9em;
      }

      nav a:hover {
        text-decoration: underline;
      }
    </style>
  </head>
  <body>
    <header>
      <Fragment set:html={finalHeaderHtml} />
    </header>

    <div class="prose">
      <nav>
        <a href="/">‚Üê Back to index</a>
      </nav>

      <h1>üîç –ü–æ–∏—Å–∫</h1>

      <div class="search-container">
        <form class="search-form" id="searchForm">
          <input
            type="text"
            class="search-input"
            id="searchInput"
            placeholder="Enter search query..."
            value={query}
            autofocus
          />
          <div class="search-mode">
            <label class="mode-label">
              <input type="radio" name="mode" value="search" checked />
              üîç Regular Search
            </label>
            <label class="mode-label">
              <input type="radio" name="mode" value="ai" />
              ü§ñ AI Search
            </label>
          </div>
          <button type="submit" class="search-button" id="searchButton">
            Search
          </button>
        </form>

        <div id="searchResults" class="search-results">
          {query && (
            <div class="loading">
              –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{query}"...
            </div>
          )}
        </div>
      </div>
    </div>

    {footerHtml && (
      <footer>
        <Fragment set:html={footerHtml} />
      </footer>
    )}

    <script>
      import { SearchPage } from '../scripts/searchPage.js';
      new SearchPage();
    </script>
  </body>
</html>